name: Auto-Increment Version

# Trigger the workflow when files in "sdk/" change
on:
  push:
    paths:
      - "sdk/**"   # Detect changes in sdk/
    branches-ignore:
      - main  # Ignore changes in the main branch

jobs: # Define the jobs to run
  update-version:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu environment

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is available

      # Step 2: Configure Git settings for automatic commits
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Get the current branch name
      - name: Get current branch name
        id: get_branch
        run: echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      # Step 4: Read the current sdkVersion from gradle.properties
      - name: Read current sdkVersion
        id: read_versions
        run: |
          SDK_VERSION=$(grep "^version=" gradle.properties | cut -d= -f2)
          echo "SDK_VERSION=$SDK_VERSION" >> $GITHUB_ENV

      # Step 5: Detect if "sdk/" has changed
      - name: Detect Changes
        id: detect_changes
        run: |
          SDK_CHANGED=false

          # Check if any files in sdk/ have changed
          if git diff --name-only HEAD^ HEAD | grep "^sdk/" > /dev/null; then
            SDK_CHANGED=true
          fi

          # Store the result in GitHub Actions environment variables
          echo "SDK_CHANGED=$SDK_CHANGED" >> $GITHUB_ENV

      # Step 6: Check if sdkVersion has been updated manually
      - name: Check if sdkVersion updated manually
        id: check_manual_update
        run: |
          MANUAL_UPDATE=false
          if git diff HEAD^ HEAD -- gradle.properties | grep "^+version=" > /dev/null; then
            MANUAL_UPDATE=true
          fi
          echo "MANUAL_UPDATE=$MANUAL_UPDATE" >> $GITHUB_ENV

      # Step 7: Increment the sdkVersion if needed
      - name: Increment sdkVersion if Needed
        id: increment_version
        if: env.MANUAL_UPDATE == 'false'
        run: |
          # Function to increment the version correctly
          increment_version() {
            local version=$1
            local major=$(echo $version | cut -d. -f1)
            local minor=$(echo $version | cut -d. -f2)
            local patch=$(echo $version | cut -d. -f3)

            # If patch is 9, reset it and increase minor
            if [ "$patch" -eq 9 ]; then
                patch=0
                minor=$((minor + 1))
            else
                patch=$((patch + 1))
            fi

            # If minor is 9 and patch was 9 (rolled over), reset minor and bump major
            if [ "$minor" -eq 10 ]; then
                minor=0
                major=$((major + 1))
            fi

            echo "$major.$minor.$patch"
          }

          # Store the new sdkVersion
          NEW_SDK_VERSION=$SDK_VERSION
          UPDATE_NEEDED=false  # Track if any update happened

          # Increment sdkVersion if sdk/ changed
          if [ "$SDK_CHANGED" = "true" ]; then
            NEW_SDK_VERSION=$(increment_version "$SDK_VERSION")
            UPDATE_NEEDED=true
          fi

          # Update the gradle.properties file only if a change is detected
          if [ "$UPDATE_NEEDED" = "true" ]; then
            sed -i "s/^version=.*/version=$NEW_SDK_VERSION/" gradle.properties
            echo "UPDATED=true" >> $GITHUB_ENV
            echo "NEW_SDK_VERSION=$NEW_SDK_VERSION" >> $GITHUB_ENV
          else
            echo "UPDATED=false" >> $GITHUB_ENV
          fi

          # Verify if the file was updated
          if git diff --exit-code gradle.properties; then
            echo "No changes detected in gradle.properties"
            echo "UPDATED=false" >> $GITHUB_ENV
          fi

      # Step 8: Commit and push the updated sdkVersion
      - name: Commit and Push Version Changes
        if: env.UPDATED == 'true'  # Only run if version was updated
        run: |
          git add gradle.properties
          git commit -m "Auto-incremented sdkVersion: $NEW_SDK_VERSION"
          git push origin ${{ env.BRANCH_NAME }}